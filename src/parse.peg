translation_unit = list(ASTToplevel, external_decl)

external_decl = seq(build_toplevel, which(function_definition, decl))

function_definition =
	seq(build_function_definition, decl_specifiers, declarator,
		opt(list(ASTDecl, decl)), compound_statement)

build_function_definition =
	build(ASTFunctionDef, 4,
		decl_specifier_list, #0,
		declarator, #1,
		old_style_param_decl_list, #2,
		body, #3)

decl_specifiers =
	nonempty_list(ASTDeclSpecifier,
		or(storage_class_specifier,
			type_specifier,
			type_qualifier,
			function_specifier))

decl =
	seq(build_decl, decl_specifiers, opt(init_declarator_list), TOK_SEMICOLON)

init_declarator_list = list(ASTInitDeclarator, init_declarator, TOK_COMMA)

init_declarator =
	seq(build_init_declarator,
		declarator,
		opt(seq(second, TOK_ASSIGN, initializer)))

build_init_declarator =
	build(ASTInitDeclarator, 2,
		declarator, #0,
		initializer, #1)

storage_class_specifier =
	seq(build_storage_class_specifier,
		which(keyword(typedef), keyword(extern), keyword(static),
			keyword(auto), keyword(register)))

type_specifier =
	seq(build_type_specifier_decl_specifier,
		or(seq(build_named_type, named_type),
			struct_or_union_specifier,
			enum_specifier))

build_type_specifier_decl_specifier =
	build(ASTDeclSpecifier, 1,
		t, TYPE_SPECIFIER,
		u.type_specifier, #0)

build_named_type =
	build(ASTTypeSpecifier, 1,
		t, NAMED_TYPE_SPECIFIER,
		u.name, "((Token *)#0)->u.symbol")

struct_or_union_specifier =
	or(seq(build_struct_or_union, struct_or_union, opt(TOK_SYMBOL),
			TOK_LCURLY, list(ASTFieldDecl, field_decl), TOK_RCURLY,
			opt(attribute)),
		seq(build_struct_or_union_tagged_named_type, struct_or_union, TOK_SYMBOL))

struct_or_union = which(keyword(struct), keyword(union))

field_decl =
	seq(build_field_decl, decl_specifiers,
		field_declarator_list, TOK_SEMICOLON)

build_field_decl =
	build(ASTFieldDecl, 3,
		decl_specifier_list, #0,
		field_declarator_list, #1)

field_declarator_list = list(ASTFieldDeclarator, field_declarator, TOK_COMMA)

field_declarator =
	or(seq(build_bitfield_declarator, opt(declarator), TOK_COLON, expr),
		seq(build_field_declarator, declarator))

build_bitfield_declarator =
	build(ASTFieldDeclarator, 3,
		t, BITFIELD_FIELD_DECLARATOR,
		u.bitfield.declarator, #0,
		u.bitfield.width, #2)

build_field_declarator =
	build(ASTFieldDeclarator, 1,
		t, NORMAL_FIELD_DECLARATOR,
		u.declarator, #0)

attribute =
	seq(build_attribute, keyword(__attribute__), TOK_LROUND, TOK_LROUND,
		TOK_SYMBOL, TOK_RROUND, TOK_RROUND)

build_attribute = build(ASTAttribute, 6, name, "((Token *)#3)->u.symbol")

enum_specifier =
	or(seq(build_enum, keyword(enum), opt(TOK_SYMBOL), TOK_LCURLY,
			enumerator_list, opt(TOK_COMMA), TOK_RCURLY),
		seq(build_enum_tagged_named_type, keyword(enum), TOK_SYMBOL))

enumerator_list = list(ASTEnumerator, enumerator, TOK_COMMA)

enumerator =
	seq(build_enumerator, TOK_SYMBOL,
		opt(seq(second, TOK_ASSIGN, assignment_expr)))

build_enumerator =
	build(ASTEnumerator, 2,
		name, "((Token *)#0)->u.symbol",
		value, #1)

build_enum_tagged_named_type =
	build(ASTTypeSpecifier, 2,
		t, ENUM_TYPE_SPECIFIER,
		u.enum_specifier.name, "((Token *)#1)->u.symbol",
		u.enum_specifier.enumerator_list, NULL)

type_qualifier =
	seq(build_type_qualifier,
		which(keyword(const), keyword(restrict), keyword(volatile)))

function_specifier = seq(build_function_specifier, keyword(inline))

build_function_specifier =
	build(ASTDeclSpecifier, 1,
		t, FUNCTION_SPECIFIER,
		u.function_specifier, INLINE_SPECIFIER)

declarator =
	or(seq(build_pointee_declarator, opt(pointer), direct_declarator),
		seq(build_terminal_pointer, pointer))

pointer =
	fold(build_next_pointer,
		seq(build_initial_pointer_result, single_pointer),
		single_pointer)

single_pointer =
	seq(build_pointer, TOK_ASTERISK, opt(list(ASTDeclSpecifier, type_qualifier)))

build_initial_pointer_result =
	build(PointerResult, 1, first, #0, last, #0)

build_pointer =
	build(ASTDeclarator, 2,
		t, POINTER_DECLARATOR,
		u.pointer_declarator.decl_specifier_list, #1,
		u.pointer_declarator.pointee, NULL)

direct_declarator_head =
	or(seq(build_ident_declarator, TOK_SYMBOL),
		seq(build_declarator, TOK_LROUND, declarator, TOK_RROUND))

build_ident_declarator =
	build(ASTDirectDeclarator, 1,
		t, IDENTIFIER_DECLARATOR,
		u.name, "((Token *)#0)->u.symbol")

build_declarator =
	build(ASTDirectDeclarator, 3,
		t, DECLARATOR,
		u.declarator, #1)

parameter_list = list(ASTParameterDecl, parameter_decl, TOK_COMMA)

parameter_decl =
	or(seq(build_parameter_decl, decl_specifiers, declarator),
		seq(build_parameter_decl, decl_specifiers, abstract_declarator),
		seq(build_ellipsis_decl, TOK_ELLIPSIS))

build_parameter_decl =
	build(ASTParameterDecl, 2,
		t, PARAMETER_DECL,
		decl_specifier_list, #0,
		declarator, #1)

build_ellipsis_decl = build(ASTParameterDecl, 1, t, ELLIPSIS_DECL)

type_name = seq(build_type_name, decl_specifiers, opt(abstract_declarator))

abstract_declarator =
	or(seq(build_pointee_declarator, opt(pointer), direct_abstract_declarator),
		seq(build_terminal_pointer, pointer))

direct_abstract_declarator_head =
	seq(optional_declarator,
		opt(seq(build_declarator, TOK_LROUND, abstract_declarator, TOK_RROUND)))

build_type_name =
	build(ASTTypeName, 2,
		decl_specifier_list, #0,
		declarator, #1)

initializer =
	or(seq(build_expr_initializer, assignment_expr),
		seq(build_brace_initializer, TOK_LCURLY, initializer_list,
			opt(TOK_COMMA), TOK_RCURLY))

build_expr_initializer =
	build(ASTInitializer, 1,
		t, EXPR_INITIALIZER,
		u.expr, #0)

build_brace_initializer =
	build(ASTInitializer, 4,
		t, BRACE_INITIALIZER,
		u.initializer_element_list, #1)

initializer_list = list(ASTInitializerElement, initializer_element, TOK_COMMA)

initializer_element =
	seq(build_initializer_element,
		opt(seq(first, designator_list, TOK_ASSIGN)),
		initializer)

build_initializer_element =
	build(ASTInitializerElement, 2,
		designator_list, #0,
		initializer, #1)

designator_list = list(ASTDesignator, designator)

designator =
	or(seq(build_index_designator, TOK_LSQUARE, expr, TOK_RSQUARE),
		seq(build_field_designator, TOK_DOT, TOK_SYMBOL))

build_index_designator =
	build(ASTDesignator, 3,
		t, INDEX_DESIGNATOR,
		u.index_expr, #1)

build_field_designator =
	build(ASTDesignator, 2,
		t, FIELD_DESIGNATOR,
		u.field_name, "((Token *)#1)->u.symbol")


statement =
	or(labeled_statement,
		compound_statement,
		jump_statement,
		selection_statement,
		iteration_statement,
		expr_statement)

labeled_statement =
	or(seq(build_labeled_statement, identifier, TOK_COLON, statement),
		seq(build_case_statement,
			keyword(case), expr, TOK_COLON, statement))

build_case_statement =
	build(ASTStatement, 4,
		t, CASE_STATEMENT,
		u.expr_and_statement.expr, #1,
		u.expr_and_statement.statement, #3)

build_labeled_statement =
	build(ASTStatement, 3,
		t, LABELED_STATEMENT,
		u.labeled_statement.label_name, "((Token *)#0)->u.symbol",
		u.labeled_statement.statement, #2)

compound_statement =
	seq(build_compound_statement, TOK_LCURLY, block_item_list, TOK_RCURLY)

build_compound_statement =
	build(ASTStatement, 3,
		t, COMPOUND_STATEMENT,
		u.block_item_list, #1)

block_item_list =
	list(ASTBlockItem, seq(build_block_item, which(decl, statement)))

expr_statement = seq(build_expr_statement, opt(expr), TOK_SEMICOLON)

selection_statement =
	or(seq(build_if_statement, keyword(if), TOK_LROUND, expr, TOK_RROUND,
			statement, opt(seq(second, keyword(else), statement))),
		seq(build_switch_statement, keyword(switch),
			TOK_LROUND, expr, TOK_RROUND, statement))

build_if_statement =
	build(ASTStatement, 6,
		t, IF_STATEMENT,
		u.if_statement.condition, #2,
		u.if_statement.then_statement, #4,
		u.if_statement.else_statement, #5)

build_switch_statement =
	build(ASTStatement, 5,
		t, SWITCH_STATEMENT,
		u.expr_and_statement.expr, #2,
		u.expr_and_statement.statement, #4)

iteration_statement =
	or(seq(build_while_statement,
			keyword(while), TOK_LROUND, expr, TOK_RROUND, statement),
		seq(build_do_while_statement, keyword(do), statement, keyword(while),
			TOK_LROUND, expr, TOK_RROUND, TOK_SEMICOLON),
		seq(build_for_statement, keyword(for), TOK_LROUND,
			opt(expr), TOK_SEMICOLON, opt(expr), TOK_SEMICOLON, opt(expr),
			TOK_RROUND, statement),
		seq(build_for_decl_statement, keyword(for), TOK_LROUND,
			decl, opt(expr), TOK_SEMICOLON, opt(expr),
			TOK_RROUND, statement))

build_while_statement =
	build(ASTStatement, 5,
		t, WHILE_STATEMENT,
		u.expr_and_statement.expr, #2,
		u.expr_and_statement.statement, #4)

build_do_while_statement =
	build(ASTStatement, 7,
		t, DO_WHILE_STATEMENT,
		u.expr_and_statement.statement, #1,
		u.expr_and_statement.expr, #4)

build_for_statement =
	build(ASTStatement, 9,
		t, FOR_STATEMENT,
		u.for_statement.init_type, FOR_INIT_EXPR,
		u.for_statement.init.expr, #2,
		u.for_statement.condition, #4,
		u.for_statement.update_expr, #6,
		u.for_statement.body, #8)

build_for_decl_statement =
	build(ASTStatement, 8,
		t, FOR_STATEMENT,
		u.for_statement.init_type, FOR_INIT_DECL,
		u.for_statement.init.decl, #2,
		u.for_statement.condition, #3,
		u.for_statement.update_expr, #5,
		u.for_statement.body, #7)

jump_statement =
	or(seq(build_goto_statement, keyword(goto), identifier, TOK_SEMICOLON),
		seq(build_continue_statement, keyword(continue), TOK_SEMICOLON),
		seq(build_break_statement, keyword(break), TOK_SEMICOLON),
		seq(build_return_statement, keyword(return), opt(expr), TOK_SEMICOLON))

build_goto_statement =
	build(ASTStatement, 3,
		t, GOTO_STATEMENT,
		u.goto_label, "((Token *)#1)->u.symbol")

build_continue_statement = build(ASTStatement, 2, t, CONTINUE_STATEMENT)

build_break_statement = build(ASTStatement, 2, t, BREAK_STATEMENT);

build_return_statement =
	build(ASTStatement, 3,
		t, RETURN_STATEMENT,
		u.expr, #1)



primary_expr =
    or(identifier,
        constant,
        seq(middle, TOK_LROUND, expr, TOK_RROUND))

constant =
	seq(build_constant,
		or(TOK_INT_LITERAL, TOK_STRING_LITERAL))

postfix_expr =
    or(seq(build_builtin_va_arg, keyword(__builtin_va_arg), TOK_LROUND, assignment_expr,
			TOK_COMMA, type_name, TOK_RROUND),
		fold(build_postfix_expr,
			primary_expr,
			which(seq(middle, TOK_LSQUARE, expr, TOK_RSQUARE),
				seq(middle, TOK_LROUND, argument_expr_list, TOK_RROUND),
				seq(second, TOK_DOT, TOK_SYMBOL),
				seq(second, TOK_ARROW, TOK_SYMBOL),
				TOK_INCREMENT,
				TOK_DECREMENT)),
        seq(build_compound_initializer,
			TOK_LROUND, type_name, TOK_RROUND, TOK_LCURLY,
            initializer_list, opt(TOK_COMMA),
            TOK_RCURLY))

argument_expr_list = list(ASTArgument, seq(build_argument, assignment_expr), TOK_COMMA)

build_argument = build(ASTArgument, 1, expr, #0)

build_builtin_va_arg =
	build(ASTExpr, 6,
		t, BUILTIN_VA_ARG_EXPR,
		u.builtin_va_arg.va_list_expr, #2,
		u.builtin_va_arg.type_name, #4)

build_compound_initializer =
	build(ASTExpr, 7,
		t, COMPOUND_EXPR,
		u.compound.initializer_element_list, #4,
		u.compound.type_name, #1)


unary_expr =
    or(postfix_expr,
        seq(build_unary_expr, TOK_INCREMENT, unary_expr),
        seq(build_unary_expr, TOK_DECREMENT, unary_expr),
        seq(build_unary_expr, unary_operator, cast_expr),
        seq(build_sizeof_expr, keyword(sizeof), unary_expr),
        seq(build_sizeof_type, keyword(sizeof), TOK_LROUND, type_name, TOK_RROUND))

unary_operator =
    or(TOK_AMPERSAND, TOK_ASTERISK, TOK_PLUS, TOK_MINUS, TOK_BIT_NOT, TOK_LOGICAL_NOT)

build_sizeof_expr =
	build(ASTExpr, 2,
		t, SIZEOF_EXPR_EXPR,
		u.unary_arg, #1)

build_sizeof_type =
	build(ASTExpr, 4,
		t, SIZEOF_TYPE_EXPR,
		u.type, #2)

cast_expr =
    or(unary_expr,
        seq(build_cast_expr, TOK_LROUND, type_name, TOK_RROUND, cast_expr))

build_cast_expr =
	build(ASTExpr, 4,
		t, CAST_EXPR,
		u.cast.cast_type, #1,
		u.cast.arg, #3)

build_binary_tail =
	build(BinaryTail, 2,
		operator, #0,
		tail_expr, #1)

multiplicative_expr =
    fold(build_binary_head,
		cast_expr,
		or(seq(build_binary_tail, TOK_ASTERISK, cast_expr),
			seq(build_binary_tail, TOK_DIVIDE, cast_expr),
			seq(build_binary_tail, TOK_MODULO, cast_expr)))

additive_expr =
    fold(build_binary_head,
		multiplicative_expr,
		or(seq(build_binary_tail, TOK_PLUS, multiplicative_expr),
			seq(build_binary_tail, TOK_MINUS, multiplicative_expr)))

shift_expr =
    fold(build_binary_head,
		additive_expr,
		or(seq(build_binary_tail, TOK_LEFT_SHIFT, additive_expr),
			seq(build_binary_tail, TOK_RIGHT_SHIFT, additive_expr)))

relational_expr =
    fold(build_binary_head,
		shift_expr,
		or(seq(build_binary_tail, TOK_LESS_THAN, shift_expr),
			seq(build_binary_tail, TOK_GREATER_THAN, shift_expr),
			seq(build_binary_tail, TOK_LESS_THAN_OR_EQUAL, shift_expr),
			seq(build_binary_tail, TOK_GREATER_THAN_OR_EQUAL, shift_expr)))

equality_expr =
    fold(build_binary_head,
		relational_expr,
        or(seq(build_binary_tail, TOK_EQUAL, relational_expr),
			seq(build_binary_tail, TOK_NOT_EQUAL, relational_expr)))

and_expr =
    fold(build_binary_head,
		equality_expr,
		seq(build_binary_tail, TOK_AMPERSAND, equality_expr))

xor_expr =
	fold(build_binary_head,
		and_expr,
		seq(build_binary_tail, TOK_BIT_XOR, and_expr))

or_expr =
	fold(build_binary_head,
		xor_expr,
		seq(build_binary_tail, TOK_BIT_OR, xor_expr))

logical_and_expr =
    fold(build_binary_head,
		or_expr,
		seq(build_binary_tail, TOK_LOGICAL_AND, or_expr))

logical_or_expr =
    fold(build_binary_head,
		logical_and_expr,
		seq(build_binary_tail, TOK_LOGICAL_OR, logical_and_expr))


conditional_expr =
	or(seq(build_conditional_expr, logical_or_expr, TOK_QUESTION_MARK, expr,
			TOK_COLON, conditional_expr),
		logical_or_expr)

build_conditional_expr =
	build(ASTExpr, 5,
		t, CONDITIONAL_EXPR,
		u.ternary_op.arg1, #0,
		u.ternary_op.arg2, #2,
		u.ternary_op.arg3, #4)

assignment_expr =
    fold(build_binary_head,
		conditional_expr,
        seq(build_binary_tail, assignment_operator, assignment_expr))

assignment_operator =
    or(TOK_ASSIGN, TOK_MULTIPLY_ASSIGN, TOK_DIVIDE_ASSIGN, TOK_MODULO_ASSIGN,
		TOK_PLUS_ASSIGN, TOK_MINUS_ASSIGN, TOK_LEFT_SHIFT_ASSIGN,
		TOK_RIGHT_SHIFT_ASSIGN, TOK_BIT_AND_ASSIGN, TOK_BIT_XOR_ASSIGN,
		TOK_BIT_OR_ASSIGN)

expr =
    fold(build_binary_head,
		assignment_expr,
        seq(build_binary_tail, TOK_COMMA, assignment_expr))
